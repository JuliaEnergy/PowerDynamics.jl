# PSSE IEEET1 Excitation System
#
# Original work Copyright (c) 2016-2022 Luigi Vanfretti, ALSETLab, and contributors
# Original work licensed under BSD 3-Clause License
# Original source: https://github.com/OpenIPSL/OpenIPSL
#
# This Julia/PowerDynamics port maintains the same mathematical formulation
# while adapting to PowerDynamics/ModelingToolkit framework conventions.

@mtkmodel RotatingExciter begin
    @structural_parameters begin
        T_E # Exciter time constant
        K_E # Exciter field gain
        E_1 # Exciter saturation point 1
        E_2 # Exciter saturation point 2
        S_EE_1 # Saturation at E_1
        S_EE_2 # Saturation at E_2
    end
    @variables begin
        I_C(t), [description="Control input current", input=true]
        EFD(t), [guess=1, description="Exciter field voltage output", output=true]
        # intermediate variables
        feedback(t)
    end
    @equations begin
        Dt(EFD) ~ 1/T_E * (I_C - feedback)
        feedback ~ K_E * EFD + (EFD * PSSE_QUAD_SE(EFD, S_EE_1, S_EE_2, E_1, E_2))
    end
end

"""
    PSSE_IEEET1

This model is a port of the OpenIPSL [`Electrical.Controls.PSSE.ES.IEEET1`](https://github.com/OpenIPSL/OpenIPSL/blob/fe8aa5c/OpenIPSL/Electrical/Controls/PSSE/ES/IEEET1.mo) model,
maintaining the same mathematical formulation while adapting to PowerDynamics/ModelingToolkit conventions.

# Validation

Validated against the OpenIPSL SMIB testcase
[`Tests.Controls.PSSE.ES.IEEET1`](https://github.com/OpenIPSL/OpenIPSL/blob/fe8aa5c/OpenIPSL/Tests/Controls/PSSE/ES/IEEET1.mo).
See [validation plot](../assets/OpenIPSL_valid/IEEET1.png) generated by automatic validation script in `/test/OpenIPSL_test`.
"""
@mtkmodel PSSE_IEEET1 begin
    @parameters begin
        # Public parameters with OpenIPSL defaults
        T_R=0.02, [description="Regulator input filter time constant [s]"]
        K_A=200, [description="Regulator output gain [pu]"]
        T_A=0.001, [description="Regulator output time constant [s]"]
        V_RMAX=2, [description="Maximum regulator output [pu]"]
        V_RMIN=-2, [description="Minimum regulator output [pu]"]
        K_E=0.1, [description="Exciter field proportional constant [pu]"]
        T_E=0.55, [description="Exciter field time constant [s]"]
        K_F=0.06, [description="Rate feedback excitation system stabilizer gain [pu]"]
        T_F=1, [description="Rate feedback time constant [s]"]
        E_1=2.85, [description="Exciter output voltage for saturation factor S_E(E_1) [pu]"]
        S_EE_1=0.3, [description="Exciter saturation factor at exciter output voltage E1 [pu]"]
        E_2=3.8, [description="Exciter output voltage for saturation factor S_E(E_2) [pu]"]
        S_EE_2=0.6, [description="Exciter saturation factor at exciter output voltage E2 [pu]"]

        # Free initialization parameter
        V_REF, [guess=1, description="Voltage reference setpoint [pu]"]
    end

    @components begin
        # Active inputs/outputs
        ECOMP_in = RealInput()    # Terminal voltage measurement input
        # EFD0_in = RealInput()     # Initial field voltage for initialization
        EFD_out = RealOutput()    # Field voltage output to generator

        # Unused inputs (commented out but kept for reference)
        # VOTHSG_in = RealInput()   # Other signal input (typically zero)
        # VUEL_in = RealInput()     # Under-excitation limiter input
        # VOEL_in = RealInput()     # Over-excitation limiter input
        # XADIFD_in = RealInput()   # Machine field current input

        # Building block components
        transducer = SimpleLag(K=1, T=T_R)
        amplifier = SimpleLagLim(K=K_A, T=T_A, outMin=V_RMIN, outMax=V_RMAX)
        derivative_lag = Derivative(K=K_F, T=T_F)
        exciter = RotatingExciter(T_E=T_E, K_E=K_E, E_1=E_1, E_2=E_2, S_EE_1=S_EE_1, S_EE_2=S_EE_2)
    end

    @variables begin
        # Internal signal variables
        voltage_error(t), [description="Voltage error signal [pu]"]
        sum_signal(t), [description="Summed signal before amplifier [pu]"]
        derivative_feedback(t), [description="Derivative feedback signal [pu]"]
    end

    @equations begin
        # Input processing
        transducer.in ~ ECOMP_in.u

        # Voltage error calculation
        voltage_error ~ V_REF - transducer.out

        # Signal summing (3-input addition: voltage_error + VOTHSG - derivative_feedback)
        # Note: VOTHSG and limiter signals are omitted (typically zero)
        sum_signal ~ voltage_error - derivative_feedback

        # Amplifier with limiting
        amplifier.in ~ sum_signal

        # Exciter
        exciter.I_C ~ amplifier.out

        # Derivative feedback
        derivative_lag.in ~ exciter.EFD
        derivative_feedback ~ derivative_lag.out

        # Output connection
        EFD_out.u ~ exciter.EFD
    end
end
